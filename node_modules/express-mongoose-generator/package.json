{
  "name": "express-mongoose-generator",
  "version": "2.0.0",
  "description": "It’s a mongoose model, REST controller and Express router code generator for Express.js 4 application",
  "author": {
    "name": "Damien Perrier",
    "email": "damienperrier33@gmail.com"
  },
  "contributors": [
    {
      "name": "romuloctba"
    }
  ],
  "keywords": [
    "mongodb",
    "mongoose",
    "express",
    "generator",
    "rest",
    "restfull",
    "api",
    "app",
    "web"
  ],
  "repository": {
    "type": "git",
    "url": "git+https://github.com/DamienP33/express-mongoose-generator.git"
  },
  "main": "bin/mongoose-gen",
  "scripts": {
    "test": "mocha --reporter spec --bail --check-leaks test/",
    "lint": "jshint ./**/*.js",
    "cs": "jscs ./**/*.js ./bin/mongoose-gen"
  },
  "engines": {
    "node": ">= 0.10.0"
  },
  "license": "MIT",
  "preferGlobal": true,
  "bin": {
    "mongoose-gen": "./bin/mongoose-gen"
  },
  "dependencies": {
    "async": "^0.9.0",
    "commander": "^2.5.0"
  },
  "devDependencies": {
    "jscs": "^2.5.1",
    "jshint": "^2.8.0",
    "mkdirp": "^0.5.0",
    "mocha": "^2.0.1",
    "nexpect": "^0.4.2",
    "rimraf": "^2.2.8"
  },
  "files": [
    "LICENSE",
    "bin/",
    "templates/",
    "lib/"
  ],
  "gitHead": "db0877c156b71e09683ea1383477b49d4726e420",
  "readme": "[![Build Status](https://travis-ci.org/DamienP33/express-mongoose-generator.svg?branch=master)](https://travis-ci.org/DamienP33/express-mongoose-generator)\n# express-mongoose-generator\n\nIt’s a mongoose model, REST controller and Express router code generator for Express.js 4 application.\n\n## Installation\n```bash\n$ npm install -g express-mongoose-generator\n```\n\n## Usage\n### Non-Interactive mode\nGenerates a Mongoose model, a REST controller and Express router :\n```bash\n$ mongoose-gen -m car -f carDoor:number,color -r\n        create: ./models/cardModel.js\n        create: ./routes/cards.js\n        create: ./controllers/cardController.js\n```\n\n##### Options\n\n  - `-m, --model <modelName>` - the model name.\n  - `-f, --fields  <fields>` - the fields (name1:type,name2:type).\n  - `-r, --rest` - enable generation REST.\n\n##### Available types\n  - string\n  - number\n  - date\n  - boolean\n  - array\n  - objectId\n\n### Interactive mode\n\nGenerates a Mongoose model, a REST controller and Express router :\n```bash\n$ mongoose-gen\nModel Name : car\nAvailable types : string, number, date, boolean, array\nField Name (press <return> to stop adding fields) : door\nField Type [string] : number\nField Name (press <return> to stop adding fields) : color\nField Type [string] : \nField Name (press <return> to stop adding fields) : owner\nField Type [string] : objectId\nReference (model name referred by the objectId field) : User\nField Name (press <return> to stop adding fields) : \nGenerate Rest (yes/no) ? [yes] : \n        create: ./models/carModel.js\n        create: ./routes/cars.js\n        create: ./controllers/carController.js\n```\n\n## Rendering\n### Model\nmodels/carModel.js :\n```javascript\nvar mongoose = require('mongoose');\nvar Schema   = mongoose.Schema;\n\nvar carSchema = new Schema({\n\t\"color\" : String,\n\t\"door\" : Number,\n    \"owner\" : {\n        type: Schema.Types.ObjectId,\n        ref: 'User'\n    }\n});\n\nmodule.exports = mongoose.model('car', carSchema);\n```\n\n### Router\nroutes/cars.js :\n```javascript\nvar express = require('express');\nvar router = express.Router();\nvar carController = require('../controllers/carController.js');\n\n/*\n * GET\n */\nrouter.get('/', function(req, res) {\n    carController.list(req, res);\n});\n\n/*\n * GET\n */\nrouter.get('/:id', function(req, res) {\n    carController.show(req, res);\n});\n\n/*\n * POST\n */\nrouter.post('/', function(req, res) {\n    carController.create(req, res);\n});\n\n/*\n * PUT\n */\nrouter.put('/:id', function(req, res) {\n    carController.update(req, res);\n});\n\n/*\n * DELETE\n */\nrouter.delete('/:id', function(req, res) {\n    carController.remove(req, res);\n});\n\nmodule.exports = router;\n```\n\n### Controller\ncontrollers/carController.js :\n```javascript\nvar carModel = require('../models/carModel.js');\n\n/**\n * carController.js\n *\n * @description :: Server-side logic for managing cars.\n */\nmodule.exports = {\n\n    /**\n     * carController.list()\n     */\n    list: function(req, res) {\n        carModel.find(function(err, cars){\n            if(err) {\n                return res.json(500, {\n                    message: 'Error getting car.'\n                });\n            }\n            return res.json(cars);\n        });\n    },\n\n    /**\n     * carController.show()\n     */\n    show: function(req, res) {\n        var id = req.params.id;\n        carModel.findOne({_id: id}, function(err, car){\n            if(err) {\n                return res.json(500, {\n                    message: 'Error getting car.'\n                });\n            }\n            if(!car) {\n                return res.json(404, {\n                    message: 'No such car'\n                });\n            }\n            return res.json(car);\n        });\n    },\n\n    /**\n     * carController.create()\n     */\n    create: function(req, res) {\n        var car = new carModel({\n\t\t\tcolor : req.body.color,\n\t\t\tdoor : req.body.door\n        });\n\n        car.save(function(err, car){\n            if(err) {\n                return res.json(500, {\n                    message: 'Error saving car',\n                    error: err\n                });\n            }\n            return res.json({\n                message: 'saved',\n                _id: car._id\n            });\n        });\n    },\n\n    /**\n     * carController.update()\n     */\n    update: function(req, res) {\n        var id = req.params.id;\n        carModel.findOne({_id: id}, function(err, car){\n            if(err) {\n                return res.json(500, {\n                    message: 'Error saving car',\n                    error: err\n                });\n            }\n            if(!car) {\n                return res.json(404, {\n                    message: 'No such car'\n                });\n            }\n\n            car.color =  req.body.color ? req.body.color : car.color;\n\t\t\tcar.door =  req.body.door ? req.body.door : car.door;\n\t\t\t\n            car.save(function(err, car){\n                if(err) {\n                    return res.json(500, {\n                        message: 'Error getting car.'\n                    });\n                }\n                if(!car) {\n                    return res.json(404, {\n                        message: 'No such car'\n                    });\n                }\n                return res.json(car);\n            });\n        });\n    },\n\n    /**\n     * carController.remove()\n     */\n    remove: function(req, res) {\n        var id = req.params.id;\n        carModel.findByIdAndRemove(id, function(err, car){\n            if(err) {\n                return res.json(500, {\n                    message: 'Error getting car.'\n                });\n            }\n            return res.json(car);\n        });\n    }\n};\n```\n\nYou then only have to add router in app.js file and MongoDB connection whit Mongoose.\napp.js :\n```javascript\nvar routes = require('./routes/index');\nvar cars = require('./routes/cars');\n ...\n\napp.use('/', routes);\napp.use('/cars', cars);\n ...\n \n```\n\n## Licence\n\nCopyright (c) 2014 Damien Perrier\nLicensed under the [MIT license](LICENSE).\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/DamienP33/express-mongoose-generator/issues"
  },
  "homepage": "https://github.com/DamienP33/express-mongoose-generator#readme",
  "_id": "express-mongoose-generator@2.0.0",
  "_shasum": "2e98f5cb2df0161d3ebd144ebac02f5d46a99487",
  "_from": "mistakevin/express-mongoose-generator",
  "_resolved": "git://github.com/mistakevin/express-mongoose-generator.git#db0877c156b71e09683ea1383477b49d4726e420"
}
